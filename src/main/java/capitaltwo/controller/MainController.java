package capitaltwo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import java.util.List;

import java.sql.Timestamp;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepo;
    @Autowired
    private CreditCardRepository creditRepo;
    @Autowired
    private DebitCardRepository debitRepo;

    @Autowired
    private CustomerAccountRepository customerRepo;

    @Autowired
    private EntityManager em;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepo.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepo.findAll();
    }

    @GetMapping(path="/credit")
    public @ResponseBody Iterable<CustomerAccount> getAllCreditCards() {
        //return customerRepo.getCustomers();
        Query q = em.createNativeQuery(
            "SELECT * FROM customer_account, transaction"
        );
        return q.getResultList();
        //return null;
    }

    private String queryResults(String query, String[] columns) {
        return QueryUtils.queryResults(em, query, columns);
    }

    @RequestMapping(value="/testjson", 
                    method=RequestMethod.GET,
                    produces = "application/json")
    @ResponseBody
    public String getCustomerAccounts() {
        String[] cols = {"id", "email", "login", "name"};
        String query = String.join("\n"
            ,"SELECT"
            ,    "account.account_id as id,"
            ,    "account.email as email,"
            ,    "account.login_id as login,"
            ,    "customer_account.first_name as name"
            ,"FROM"
            ,    "account, customer_account"
            ,"WHERE"
            ,    "account.account_id = customer_account.account_id"
        );
        return queryResults(query, cols);
    }

    @RequestMapping(value="/findBusiness",
                    params = "email", 
                    method=RequestMethod.GET,
                    produces = "application/json")
    @ResponseBody
    public String getBusinessAccount(@RequestParam("email") String email) {
        String[] cols = {"business_id", "name", "reward_rate", "expiration", "position","verified","email","phoneNo"};
        String query = String.join("\n"
            ,"SELECT"
            ,    "*"
            ,"FROM"
            ,    "business_list"
            ,"WHERE"
            ,    "email = '"+email+"'"
        );
        return queryResults(query, cols);
    }

    @RequestMapping(value="/findCustomerId",
                    params = "email", 
                    method=RequestMethod.GET,
                    produces = "application/json")
    @ResponseBody
    public String getCustomerAccountID(@RequestParam("email") String email) {
        String[] cols = {"account_id"};
        String query = String.join("\n"
            ,"SELECT"
            ,    "account_id"
            ,"FROM"
            ,    "account"
            ,"WHERE"
            ,    "email = '"+email+"'"
        );
        return queryResults(query, cols);
    }

    @RequestMapping(value="/getCustomerTrans",
                    params = "account_id", 
                    method=RequestMethod.GET,
                    produces = "application/json")
    @ResponseBody
    public String getCustomerTransaction(@RequestParam("account_id") Long account_id) {
        String[] cols = {"transaction_id","city","cost","date","state","business_id","card_id","quantity","name","category"};
        String query = String.join("\n"
            ,"SELECT"
            ,    "*"
            ,"FROM"
            ,    "transaction_list"
            ,"WHERE"
            ,    "card_id in"
            ,"("
                ,"SELECT"
                ,"customer_cards_card_number"
                ,"FROM"
                ,"customer_account_customer_cards"
                ,"WHERE"
                ,"customer_account_account_id = "+account_id+")"
        );
        //return em.createNativeQuery(query).getResultList().toString();
        return queryResults(query, cols);
    }  

     @RequestMapping(value="/getBusinessTrans",
                    params={"business_id", "start", "end"},
                    method=RequestMethod.GET,
                    produces="application/json")
    @ResponseBody
    public String getBusinessTransaction(
        @RequestParam("business_id") Long business_id,
        @RequestParam("start") String start,
        @RequestParam("end") String end) {
        String[] cols = {
            "transaction_id","city","cost","date","state","business_id",
            "card_id","quantity","name","category"
        };

        String dateJoin = "";
        if (start != null && start != "") {
            dateJoin += "date >= " + start;
            if (end != null && end != "") {
                dateJoin += " AND ";
            }
        }
        if (end != null && end != "") {
            dateJoin += "date <= " + end;
        }

        String query = String.join("\n"
            ,"SELECT"
            ,    "*"
            ,"FROM"
            ,    "transaction_list"
            ,"WHERE"
            ,    "business_id = "+business_id
            ,    dateJoin
            ,"ORDER BY"
            ,"date, transaction_id"
        );
        return queryResults(query, cols);
    }    


    /****************** UNUSED ************/
    /*
    Example output:
    {
        results: {
            city: 
            cost:
            date:
            state:
            business:
            card_number:
            transaction_items: [
                {
                    name:
                    description:
                    unit_price:
                    quantity:
                }
            ]
        }
    }
    */
    @RequestMapping(value="/getAllCustomerTrans",
                    params={"email", "start", "end"},
                    method=RequestMethod.GET,
                    produces="application/json")
    @ResponseBody
    public String getAllCustomerTransaction(@RequestParam("email") String email,
                                            @RequestParam("start") String start,
                                            @RequestParam("end") String end) {
        //ArrayList<Integer> startDate;
        //ArrayList<Integer> endDate;
        //if (!((start == null || start.equals("")) ||
        //     (end == null || end.equals("")))) {
        //    ArrayList<String> startParams = start.split("/");
        //    ArrayList<String> endParams = end.split("/");
        //    if (startParams.size() != endParams.size() != 3) { 
        //        System.out.println("ERROR: INVALID PARAMETERS");
        //        return "";
        //    }
        //    startDate = stringArrayListToInt(startDate);
        //    endDate = stringArrayListToInt(endParams);
        //} else {
        //    startDate = Arrays.asList(DEFAULT_START_DATE);
        //    endDate = Arrays.asList(DEFAULT_END_DATE);
        //}
        String[] cols = {
            "city", "cost", "date", "state", "business", "card_number"};
        //    "transaction_items"
        //};
        String query = String.join("\n"
            ,"SELECT"
            ,"   transaction.transaction_id"
            ,"   transaction.city,"
            ,"   transaction.cost,"
            ,"   transaction.date,"
            ,"   transaction.state,"
            ,"   business.name,"
            ,"   card.card_number"
            ,"FROM"
            ,"   account,"
            ,"   card,"
            ,"   transaction,"
            ,"   business"
            ,"WHERE"
            ,   "account.email =" + email + "AND"
            ,"   account.account_id = card.account_account_id AND"
            ,"   card.card_number = transaction.card_card_number AND"
            ,"   transaction.business_business_id = business.business_id AND"
            ,"   transaction.date >= start AND transaction.date <= end;"
        );
        List<Object[]> queryResults = em.createNativeQuery(query).getResultList();

        //String[] subCols = {
        //    
        //};
        //for (Object[] obj : queryResults) {
        //    BigInteger transId = (BigInteger)obj[0];
        //    String subquery = String.join("\n"
        //        ,"SELECT"
        //        ,"    transaction_item.quantity,"
        //        ,"    transaction_item.unit_price,"
        //        ,"    item.name,"
        //        ,"    item.description"
        //        ,"FROM"
        //        ,"    transaction_item,"
        //        ,"    item"
        //        ,"WHERE"
        //        ,"    transaction_item.item_item_id = item.item_id AND"
        //        ,"    transaction_item.transaction_transaction_id = " + transId + ";"
        //    );
        //    ArrayList<Object> objArrList = new ArrayList<Object>(Arrays.asList(obj));
        //    objArrList.
        //}
        return Json.createObjectBuilder().add("results", toJson(queryResults, cols))
            .build().toString();
    }

    //private String getTransactionItemsHelper(

    /* {Date, Month, Year} */
    private static Integer[] DEFAULT_START_DATE = {1, 1, 0};
    private static Integer[] DEFAULT_END_DATE = {1, 1, 9990};
}
